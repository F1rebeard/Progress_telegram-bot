import logging
import os

from aiogram import types
from aiogram.utils.exceptions import ChatNotFound, BotBlocked
from datetime import datetime
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

from create_bot import bot, db
from config.constants import ADMIN_IDS
from keyboards.user_kb import (choose_sub,
                               registration_button,
                               subscription_kb,
                               user_keyboard,
                               unfreeze_kb)
from handlers.registration import Registration

load_dotenv()

PAYMENT_PROVIDER_TOKEN = os.getenv('PAYMENT_PROVIDER_TOKEN')

# 1 –º–µ—Å—è—Ü –±–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–∞
standard_price = [
    types.LabeledPrice(label='30 –¥–Ω–µ–π –±–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–∞',
                       amount=300000),
]

# 1 –º–µ—Å—è—Ü —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º
plus_coach_price = [
    types.LabeledPrice(label='30 –¥–Ω–µ–π c –∫—É—Ä–∞—Ç–æ—Ä–æ–º',
                       amount=500000),
]


class PaymentStatus(StatesGroup):
    Choose = State()


async def choose_subscription(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.set_state(PaymentStatus.Choose)
        await bot.send_message(
            message.from_user.id,
            '–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:',
            reply_markup=choose_sub
        )


async def pay_for_subscription(query: types.CallbackQuery, state: FSMContext):
    telegram_id = query.from_user.id
    await bot.delete_message(telegram_id, query.message.message_id)
    if query.data == 'one_month_sub':
        await bot.send_invoice(
            chat_id=telegram_id,
            title='30 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ "–ü—Ä–æ–≥—Ä–µ—Å—Å"',
            description='–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏, '
                        '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, —Ç–µ—Å—Ç–∞–º–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ –Ω–∞ 30 –¥–Ω–µ–π '
                        '–±–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–∞',
            need_email=True,
            send_email_to_provider=True,
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency='rub',
            prices=standard_price,
            start_parameter='standard_sub',
            payload='standard_thirty_days_sub',
            is_flexible=False,
            provider_data={
                "receipt": {
                    "items": [
                        {
                            "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π –±–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–∞",
                            "quantity": "1.00",
                            "amount": {
                                "value": "3000.00",
                                "currency": "RUB"
                            },
                            "vat_code": 1,
                        }
                    ],
                },
                "capture": True,
            }
            )
        await state.finish()
        await query.answer()
    if query.data == 'one_month_sub_plus':
        await bot.send_invoice(
            chat_id=query.from_user.id,
            title='30 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ "–ü—Ä–æ–≥—Ä–µ—Å—Å" c –∫—É—Ä–∞—Ç–æ—Ä–æ–º',
            description='–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏, '
                        '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, —Ç–µ—Å—Ç–∞–º–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ –Ω–∞ 30 –¥–Ω–µ–π '
                        '—Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º',
            need_name=True,
            send_email_to_provider=True,
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency='rub',
            prices=plus_coach_price,
            start_parameter='plus_coach_sub',
            payload='plus_coach_thirty_days_sub',
            is_flexible=False,
            provider_data={
                "receipt": {
                    "items": [
                        {
                            "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π c –∫—É—Ä–∞—Ç–æ—Ä–æ–º",
                            "quantity": "1.00",
                            "amount": {
                                "value": "5000.00",
                                "currency": "RUB"
                            },
                            "vat_code": 1,
                        }
                    ],
                },
                "capture": True,
            }
        )
        await state.finish()
        await query.answer()


async def subscription_pre_checkout(
        pre_checkout_query: types.PreCheckoutQuery,
        state: FSMContext):
    if not hasattr(pre_checkout_query.order_info, 'email'):
        return await bot.answer_pre_checkout_query(
            pre_checkout_query.id,
            ok=False,
            error_message='Email –Ω–µ —É–∫–∞–∑–∞–Ω'
        )
    await bot.answer_pre_checkout_query(
        pre_checkout_query.id,
        ok=True,
        error_message='–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø–ª–∞—Ç–µ'
    )
    await state.set_state(Registration.payment)


async def got_payment(message: types.Message, state: FSMContext):
    """

    :param message:sqlite_master
    :param state:
    :return:
    """
    telegram_id = message.from_user.id
    username = message.from_user.username
    if await db.user_exists(telegram_id):
        # –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É +30 –¥–Ω–µ–π
        await db.update_user_subscription(telegram_id)
        # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        if not await db.check_subscription_status(telegram_id):
            # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å
            await db.activate_subscription_status(telegram_id)
        subscription_date = await db.get_user_subscription_date(telegram_id)
        subscription_date = subscription_date.strftime("%d.%m.%Y")
        user_name = await db.get_user_name(telegram_id)
        await state.finish()
        if message.successful_payment.invoice_payload == 'standard_thirty_days_sub':
            await bot.send_message(
                telegram_id,
                f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ üëç\n\n'
                f'–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {subscription_date}',
                reply_markup=user_keyboard)
            for admin_id in ADMIN_IDS:
                # [0] - –∏–º—è [1] - —Ñ–∞–º–∏–ª–∏—è
                try:
                    await bot.send_message(
                        admin_id,
                        f'{user_name[0]} {user_name[1]} –æ–ø–ª–∞—Ç–∏–ª(–∞) –ø–æ–¥–ø–∏—Å–∫—É '
                        f'(–±–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–∞) ü§ëü§ëü§ë\n'
                        f'telegram_id: {telegram_id}\n'
                        f'username: @{username}\n\n'
                    )
                except ChatNotFound:
                    logging.info('–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!')
                continue
        elif message.successful_payment.invoice_payload == 'plus_coach_thirty_days_sub':
            await bot.send_message(
                telegram_id,
                f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüëç\n\n '
                f'–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ c –∫—É—Ä–∞—Ç–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤—É–µ—Ç '
                f'–¥–æ {subscription_date} \n\n'
                f'–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞ —Å–≤—è–∂–∏—Å—å —Å @uncle_boris',
                reply_markup=user_keyboard)
            for admin_id in ADMIN_IDS:
                # [0] - –∏–º—è [1] - —Ñ–∞–º–∏–ª–∏—è
                await bot.send_message(
                    admin_id,
                    f'{user_name[0]} {user_name[1]} –æ–ø–ª–∞—Ç–∏–ª(–∞) –ø–æ–¥–ø–∏—Å–∫—É '
                    f'(—Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º) ü§ëü§ëü§ë\n'
                    f'telegram_id: {telegram_id}\n'
                    f'username: @{username}\n\n'
                )
    else:
        async with state.proxy() as data:
            data['telegram_id'] = telegram_id
            data['username'] = message.from_user.username
            data['registration_date'] = datetime.now().date()
        await db.add_user(state)
        await db.new_user_subscription(telegram_id)
        await db.activate_subscription_status(telegram_id)
        subscription_date = await db.get_user_subscription_date(telegram_id)
        subscription_date = subscription_date.strftime("%d.%m.%Y")
        await state.set_state(Registration.new_user)
        if message.successful_payment.invoice_payload == 'standard_thirty_days_sub':
            await bot.send_message(
                telegram_id,
                f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ üëç\n\n'
                f'–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {subscription_date}\n\n'
                f'–ê —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —ç—Ç–æ –∑–∞–π–º–µ—Ç –±—É–∫–≤–∞–ª—å–Ω–æ '
                f'–ø–∞—Ä—É –º–∏–Ω—É—Ç.\n',
                reply_markup=registration_button
            )
            for admin_id in ADMIN_IDS:
                # [0] - –∏–º—è [1] - —Ñ–∞–º–∏–ª–∏—è
                await bot.send_message(
                    admin_id,
                    f'–ö –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è(-–∞—Å—å) @{username}\n\n '
                    f'(–±–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–∞) ü§ëü§∏\n'
                    f'telegram_id: {telegram_id}\n'
                )
        elif message.successful_payment.invoice_payload == 'plus_coach_thirty_days_sub':
            await bot.send_message(
                telegram_id,
                f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüëç\n\n '
                f'–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ c –∫—É—Ä–∞—Ç–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ '
                f'–¥–æ {subscription_date}\n\n'
                f'–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞ —Å–≤—è–∂–∏—Å—å —Å @uncle_boris \n\n'
                f'–ê —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —ç—Ç–æ –∑–∞–π–º–µ—Ç –±—É–∫–≤–∞–ª—å–Ω–æ '
                f'–ø–∞—Ä—É –º–∏–Ω—É—Ç.\n',
                reply_markup=registration_button)
            for admin_id in ADMIN_IDS:
                # [0] - –∏–º—è [1] - —Ñ–∞–º–∏–ª–∏—è
                await bot.send_message(
                    admin_id,
                    f'–ö –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è(-–∞—Å—å) @{username}\n\n '
                    f'(—Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º) ü§ëü§∏\n'
                    f'telegram_id: {telegram_id}\n'
                )


async def subscription_warnings():
    """
    A Functions which checks and warns user about end of subscription
    :return:
    """
    try:
        today = datetime.now().date()
        users_subs = await db.get_users_subscription_date()
        # —É –∫–æ–≥–æ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞
        ended = []
        # –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è
        ending_today = []
        # –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞
        ending_tomorrow = []
        # –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –¥–≤–∞ –¥–Ω—è
        ending_in_two_days = []
        for data in users_subs:
            # data[1] = subscription date
            # data[0] = telegram_id
            subscription_date = datetime.strptime(data[1], "%Y-%m-%d").date()
            if (subscription_date - today).days == 0:
                ending_today.append(data[0])
            elif (subscription_date - today).days == 1:
                ending_tomorrow.append(data[0])
            elif (subscription_date - today).days == 2:
                ending_in_two_days.append(data[0])
            elif (subscription_date - today).days < 0:
                if await db.check_subscription_status(telegram_id=data[0]):
                    await db.deactivate_subscription_status(telegram_id=data[0])
                    ended.append(data[0])
                else:
                    pass
        for telegram_id in ended:
            try:
                await bot.send_message(
                    telegram_id,
                    '–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å üò¨üò≠, —Å–∫–æ—Ä–µ–µ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!',
                    reply_markup=subscription_kb
                )
            except ChatNotFound or BotBlocked:
                logging.info('–ù–µ—Ç—É —á–∞—Ç–∞ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
            continue
        for telegram_id in ending_today:
            try:
                await bot.send_message(telegram_id,
                                       '–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è!\n\n'
                                       '–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–¥–ª–∏—Ç—å ü§ñ')
            except ChatNotFound:
                logging.info('–ù–µ—Ç—É —á–∞—Ç–∞ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
            continue
        for telegram_id in ending_tomorrow:
            try:
                await bot.send_message(telegram_id,
                                       '–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!\n\n'
                                       '–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–¥–ª–∏—Ç—å ü§ñ')
            except ChatNotFound or BotBlocked:
                logging.info('–ù–µ—Ç—É —á–∞—Ç–∞ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
            continue
        for telegram_id in ending_in_two_days:
            try:
                await bot.send_message(telegram_id,
                                       '–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è'
                                       ' –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞!\n\n'
                                       '–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–¥–ª–∏—Ç—å ü§ñ'
                                       )
            except ChatNotFound or BotBlocked:
                logging.info('–ù–µ—Ç—É —á–∞—Ç–∞ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
            continue
    except ValueError or TypeError:
        logging.info('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–µ!')


async def subscription_control(telegram_id: int):
    """
    :param telegram_id:
    :return:
    """
    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    sub_status = await db.check_subscription_status(telegram_id)
    freeze_status = await db.check_freeze_status(telegram_id)
    if not sub_status:
    # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
    # —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
        chat = await bot.get_chat(telegram_id)
        await bot.send_message(chat_id=chat.id,
                               text='–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å üòû',
                               reply_markup=subscription_kb)
    elif freeze_status:
        chat = await bot.get_chat(telegram_id)
        await bot.send_message(chat_id=chat.id,
                               text='–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞ ‚õÑ',
                               reply_markup=unfreeze_kb)
    else:
        pass


def register_payment_handlers(dp: Dispatcher):
    dp.register_pre_checkout_query_handler(
        subscription_pre_checkout,
        lambda query: True
    )
    dp.register_message_handler(
        choose_subscription,
        text='‚è≥üàÇ –ü–æ–¥–ø–∏—Å–∫–∞',
        state='*'
    )
    dp.register_callback_query_handler(
        pay_for_subscription,
        lambda query: True,
        state=PaymentStatus.Choose
    )
    dp.register_message_handler(
        got_payment,
        content_types=ContentType.SUCCESSFUL_PAYMENT,
        state=Registration.payment
    )
