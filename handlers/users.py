import logging
import os

from datetime import datetime
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.utils.callback_data import CallbackData
from aiogram.dispatcher.filters.state import State, StatesGroup

from config.constants import (ACTIVATIONS_BTNS,
                              EXERCISES_BTNS,
                              RELEASES_BTNS,
                              PREACTIVATIONS_BTNS,
                              STRETCHING_BTNS,
                              ABBREVIATIONS_DATA,
                              ADMIN_IDS)
from graphic.graphic import characteristics_graphic
from graphic.formula import (get_base_profile_data,
                             get_full_profile_data)
from keyboards.user_kb import (user_keyboard,
                               profile_keyboard_1,
                               subscription_kb,
                               registration_button,
                               unfreeze_kb,
                               exercises_and_activations,
                               create_url_inline_keyboard
                               )
from keyboards.profile_kb import categories_keyboard
from keyboards.admin_kb import admin_keyboard
from keyboards.athlete_tests_kb import tests_inline_keyboard
from handlers.registration import Registration
from handlers.athlete_tests import INSTRUCTION
from create_bot import bot, db
from workout_clr.workout_calendar import calendar_callback as \
    workout_cal_callback, WorkoutCalendar


class MainMenu(StatesGroup):
    exercises = State()
    abbreviations = State()


async def start_bot(message: types.Message, state: FSMContext):
    """
    Start a keyboard for users or admins
    """
    telegram_id = message.from_user.id
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —é–∑–µ—Ä –∞–¥–º–∏–Ω
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if await db.user_exists(telegram_id):
        current_state = await state.get_state()
        if current_state is None:
            pass
        else:
            await state.finish()
        try:
            # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            # –∑–∞–≤–µ—Ä–Ω—É—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_date = await db.get_user_subscription_date(telegram_id)
            days_till_payment = (subscription_date - datetime.now().date()).days
            subscription_date = subscription_date.strftime("%d.%m.%Y")
            # –ï—Å–ª–∏ —è–≤–ª—è—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
            if telegram_id in ADMIN_IDS:
                await message.answer(
                    '–ü—Ä–∏–≤–µ—Ç, –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å {0.first_name}!'.format(message.from_user),
                    reply_markup=admin_keyboard
                )
            elif await db.check_freeze_status(telegram_id):
                await message.answer(text='–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞ ‚ùÑÔ∏è',
                                           reply_markup=unfreeze_kb)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            elif days_till_payment < 0:
                await message.answer(
                    f'–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å {subscription_date} '
                    f'üò¢üò≠. \n\n –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫—Ä—É—Ç—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ -'
                    f' –ø—Ä–æ–¥–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ üòâ',
                    reply_markup=subscription_kb
                )
            elif days_till_payment == 0:
                await message.answer(
                    f'–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è! –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å'
                    f' –∫–ª–∞—Å—Å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —É–±–æ–π–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è -'
                    f' –ø—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É üòâ',
                    reply_markup=user_keyboard
                )
            elif days_till_payment == 1:
                await message.answer(
                    f'–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞! –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å'
                    f' –∫–ª–∞—Å—Å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —É–±–æ–π–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è -'
                    f' –ø—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É üòâ',
                    reply_markup=user_keyboard
                )
            else:
                await message.answer(
                    f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ '
                    f'—Ç–µ—á–µ–Ω–∏–∏ {days_till_payment} –¥–Ω–µ–π. –û—Ç–ª–∏—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ '
                    f'–ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ç–≤–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö ü§ôüí™',
                    reply_markup=user_keyboard
                )
        except ValueError or TypeError:
            await message.answer('–ù–µ—Ç—É –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–µ!')
    # —É—Å–ª–æ–≤–∏–µ, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –æ–ø–ª–∞—Ç–∏–ª, –Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–æ –∫–æ–Ω—Ü–∞.
    elif await db.user_payed_not_registered(telegram_id):
        await state.set_state(Registration.new_user)
        await message.answer(
            '–¢—ã —Ç–∞–∫ –∏ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —ç—Ç–æ –∑–∞–π–º–µ—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç',
            reply_markup=registration_button
        )
        await message.answer('–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞'
                             '–Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã—à–µ ‚òùÔ∏è')
    else:
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}\n\n'
            f'–°–º–æ—Ç—Ä—é —Ç—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ! –ï—Å–ª–∏ —Ç—ã —Ç—É—Ç –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –≤ "–ü—Ä–æ–≥—Ä–µ—Å—Å–µ",'
            f' —Ç–æ –æ–ø–ª–∞—á–∏–≤–∞–π –ø–æ–¥–ø–∏—Å–∫—É, –ø—Ä–æ—Ö–æ–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –≤–ø–µ—Ä—ë–¥!',
            reply_markup=subscription_kb
        )


async def show_exercises(message: types.Message,
                         state: FSMContext):
    """
    Shows categories for exercises, stretching, releases for user.
    :param message:
    :param state:
    :return:
    """
    current_state = await state.get_state()
    if current_state is None:
        pass
    await state.set_state(state=MainMenu.exercises)
    await message.answer(
        text='–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
        reply_markup=exercises_and_activations)


async def show_abbreviations(message: types.Message,
                             state: FSMContext):
    """
    Show abbreviations list for user.
    :param message:
    :param state:
    :return:
    """
    inline_kb = types.InlineKeyboardMarkup()
    # adding buttons with abbreviations
    for abbreviation, (description, query_data) in ABBREVIATIONS_DATA.items():
        inline_kb.insert(
            types.InlineKeyboardButton(text=abbreviation,
                                       callback_data=query_data)
        )
    await state.set_state(state=MainMenu.abbreviations)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ:',
                         reply_markup=inline_kb)


def get_description_from_data(
        query_data: str) -> str:
    """

    """
    try:
        for abbrv, (desc, data) in ABBREVIATIONS_DATA.items():
            if data == query_data:
                return desc
    except ValueError:
        logging.info('–ù–µ—Ç—É —Ç–∞–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è')


async def send_description(query: types.CallbackQuery):
    """
    Show description for every abbreviation.
    :param query:
    :return:
    """
    description = get_description_from_data(query.data)
    await query.message.answer(text=description)
    await query.answer()


async def choose_exercise_category(query: types.CallbackQuery,
                                   state: FSMContext):
    """
    Open a chosen category with urls of exercises for user.
    :param query:
    :param state:
    :return:
    """
    if query.data == 'activations':
        inline_url_kb = create_url_inline_keyboard(ACTIVATIONS_BTNS)
        await bot.edit_message_text(text='–ê–∫—Ç–∏–≤–∞—Ü–∏–∏',
                                    message_id=query.message.message_id,
                                    chat_id=query.message.chat.id,
                                    reply_markup=inline_url_kb)

    elif query.data == 'preactivations':
        inline_url_kb = create_url_inline_keyboard(PREACTIVATIONS_BTNS)
        await bot.edit_message_text(text='–ü—Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏',
                                    message_id=query.message.message_id,
                                    chat_id=query.message.chat.id,
                                    reply_markup=inline_url_kb)
    elif query.data == 'stretching':
        inline_url_kb = create_url_inline_keyboard(STRETCHING_BTNS)
        await bot.edit_message_text(text='–†–∞—Å—Ç—è–∂–∫–∞',
                                    message_id=query.message.message_id,
                                    chat_id=query.message.chat.id,
                                    reply_markup=inline_url_kb)
    elif query.data == 'exercises':
        inline_url_kb = create_url_inline_keyboard(EXERCISES_BTNS)
        await bot.edit_message_text(text='–¢–µ—Ö–Ω–∏–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
                                    message_id=query.message.message_id,
                                    chat_id=query.message.chat.id,
                                    reply_markup=inline_url_kb)
    elif query.data == 'release':
        inline_url_kb = create_url_inline_keyboard(RELEASES_BTNS)
        await bot.edit_message_text(text='–†–µ–ª–∏–∑',
                                    message_id=query.message.message_id,
                                    chat_id=query.message.chat.id,
                                    reply_markup=inline_url_kb)
    elif query.data == 'back':
        await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                                    message_id=query.message.message_id,
                                    chat_id=query.message.chat.id,
                                    reply_markup=exercises_and_activations)


async def show_profile_menu(message: types.Message,
                            state: FSMContext):
    """
    Pops up profile menu.
    :param message:
    :param state:
    :return:
    """
    current_state = await state.get_state()
    if current_state is None:
        pass
    else:
        await state.finish()
    await message.answer('–í—ã –∑–∞—à–ª–∏ –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
                         ' –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.',
                         reply_markup=profile_keyboard_1)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
                         reply_markup=categories_keyboard)


async def show_tests_menu(message: types.Message,
                          state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        pass
    else:
        await state.finish()
    await message.answer(
        text=INSTRUCTION,
        reply_markup=await tests_inline_keyboard()
    )


async def back_to_main_menu(message: types.Message, state: FSMContext):
    """
    Returns user back to main menu.
    :param message:
    :param state:
    :return:
    """
    current_state = await state.get_state()
    if current_state is None:
        pass
    else:
        await state.finish()
        logging.info('Cancelling state %r', current_state)
    if message.from_user.id in ADMIN_IDS:
        await message.answer('‚¨á –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨á', reply_markup=admin_keyboard)
    else:
        await message.answer('‚¨á –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨á', reply_markup=user_keyboard)


async def show_workout_calendar(message: types.Message,
                                state: FSMContext):
    """
    Pops ups workout calendar
    :param message:
    :param state:
    :return:
    """
    current_state = await state.get_state()
    if current_state is None:
        pass
    else:
        await state.finish()
        logging.info('Cancelling state %r', current_state)
    await bot.send_message(
        message.from_user.id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: ',
        reply_markup=await WorkoutCalendar().start_calendar(
            telegram_id=message.from_user.id
        )
    )


async def choose_date(
        query: types.CallbackQuery,
        callback_data: CallbackData,
        state: FSMContext
):
    selected, date = await WorkoutCalendar().process_selection(
        query, callback_data)
    await WorkoutCalendar().day_action(query, callback_data, state)
    if selected:
        await db.update_chosen_date(query.from_user.id, date.date())
        telegram_id = query.from_user.id
        chosen_date = await db.get_chosen_date(telegram_id)
        workout_dates = await db.collect_workout_dates(telegram_id)
        if ((await db.check_subscription_status(telegram_id)) and
                (not await db.check_freeze_status(telegram_id))):
            if chosen_date in workout_dates:
                await query.message.answer(
                    text=f'–í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å - {date.strftime("%d.%m.%Y")}\n'
                    f'–î–µ–π—Å—Ç–≤–∏—è:',
                    reply_markup=await WorkoutCalendar().chosen_day()
                )
                await query.answer()
            else:
                await query.message.answer(text='–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏üèñÔ∏è')
        elif await db.check_freeze_status(telegram_id):
            await query.message.answer(text='–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞ ‚ùÑÔ∏è',
                                       reply_markup=unfreeze_kb)
        else:
            await query.message.answer(text='–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å üíî',
                                       reply_markup=subscription_kb)
            await query.answer()


async def show_categories(message: types.Message,
                          state: FSMContext) -> None:
    """
    Pressing category buttons show all the categories.
    :param message:
    :param state:
    :return:
    """
    await state.finish()
    await bot.send_message(message.from_user.id,
                           f'{"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏" : ^10}',
                           reply_markup=categories_keyboard)


async def draw_base_graph(message: types.Message) -> None:
    """
    Shows up the base graph or list of unfilled exercises for the user.
    """
    user_id = message.from_user.id
    base_user_values = await get_base_profile_data(user_id)
    # list for unfilled profile exercises for user
    not_fully_filled_data = []
    for result in base_user_values:
        if type(result) is str:
            not_fully_filled_data.append(result)
    if not_fully_filled_data:
        await message.answer(
            '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ '
            '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ'
            ' —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n\n')
        for missing_movements in not_fully_filled_data:
            await message.answer(text=missing_movements)
    elif base_user_values[0] is None:
        await message.answer('–û–±—Ä–∞—Ç–∏—Å—å –∫ @uncle_boris, –æ–Ω –∑–Ω–∞–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å!')
    else:
        await message.answer(
            '–ë–∞–∑–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö '
            '–Ω–µ–¥–µ–ª—å:'
        )
        await characteristics_graphic(base_user_values, user_id)
        await bot.send_photo(
            chat_id=message.from_user.id,
            photo=open(f'media/{user_id}.png', 'rb')
        )
        os.remove(f'media/{user_id}.png')


async def draw_full_graph(message: types.Message) -> None:
    """
    Shows users characteristics graph with all filled exercises and tasks.
    If not exercises are filled, shows the list of exercises to fill up.
    :param message:
    :return:
    """
    user_id = message.from_user.id
    full_user_values = await get_full_profile_data(user_id)
    # —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    not_fully_filled_data = []
    for result in full_user_values:
        if type(result) is str:
            not_fully_filled_data.append(result)
    if not_fully_filled_data:
        await message.answer(
            '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ'
            ' —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n\n')
        for missing_movements in not_fully_filled_data:
            await message.answer(text=missing_movements)
    elif full_user_values[0] is None:
        await message.answer('–û–±—Ä–∞—Ç–∏—Å—å –∫ @uncle_boris, –æ–Ω –∑–Ω–∞–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å!')
    else:
        await message.answer(
            '–û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤—Å–µ–º '
            '–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n\n–ì—Ä–∞—Ñ–∏–∫ —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç, –¥–∂–∞—Å—Ç —ç –º–æ–º—É–µ–º–µ–Ω—Ç'
        )
        await characteristics_graphic(full_user_values, user_id)
        await bot.send_photo(
            chat_id=message.from_user.id,
            photo=open(f'media/{user_id}.png', 'rb')
        )
        os.remove(f'media/{user_id}.png')


def register_users_handlers(dp: Dispatcher):
    """
    Registration of user handlers.
    """
    dp.register_message_handler(start_bot,
                                commands=['start'],
                                state='*')
    dp.register_callback_query_handler(choose_date,
                                       workout_cal_callback.filter(),
                                       state='*')
    dp.register_callback_query_handler(send_description,
                                       lambda query: True,
                                       state=MainMenu.abbreviations)
    dp.register_callback_query_handler(choose_exercise_category,
                                       lambda query: True,
                                       state=MainMenu.exercises)
    dp.register_message_handler(show_profile_menu, text='üëπ –ü—Ä–æ—Ñ–∏–ª—å',
                                state='*')
    dp.register_message_handler(back_to_main_menu, text='‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                state="*")
    dp.register_message_handler(show_exercises, text='ü§ì –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
                                state='*')
    dp.register_message_handler(show_abbreviations, text='‚ùì –°–æ–∫—Ä–∞—â–µ–Ω–∏—è',
                                state='*'),
    dp.register_message_handler(show_workout_calendar, text='üèã –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
                                state='*')
    dp.register_message_handler(show_tests_menu, text='üìâ –¢–µ—Å—Ç—ã', state='*')
    dp.register_message_handler(show_categories, text='ü¶ÑÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
                                state='*')
    dp.register_message_handler(draw_base_graph,
                                text='üêØüêæ –ë–∞–∑–æ–≤–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞',
                                state='*')
    dp.register_message_handler(draw_full_graph,
                                text='ü•∑üèø‚òØ –ü–æ–ª–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞',
                                state='*')
