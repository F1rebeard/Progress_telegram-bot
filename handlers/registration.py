import logging
import re
from aiogram import types, Dispatcher
from datetime import datetime

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from create_bot import bot, db
from keyboards.user_kb import (
    choose_levels, choose_kb, registration_keyboard, gender_keyboard,
    user_keyboard
)


class Registration(StatesGroup):
    new_user = State()
    payment = State()
    first_name = State()
    last_name = State()
    gender = State()
    email = State()
    training_level = State()


async def start_registration(query: types.CallbackQuery,
                             state: FSMContext) -> None:
    """
    Start registration and asks for first name of user.
    :param query:
    :param state:
    :return:
    """
    if query.data == 'start_registration':
        await query.message.answer(text='–û—Ç–ª–∏—á–Ω–æ!\n\n–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:')
        await state.set_state(Registration.first_name)
        await query.answer()


async def get_first_name(message: types.Message, state: FSMContext) -> None:
    """
    Gets first name of user and asks for last name.
    :param message:
    :param state:
    :return:
    """
    if re.match(r"^[A-Z|–ê-–Ø–Å][a-z|–∞-—è—ë]{1,15}$", message.text):
        async with state.proxy() as data:
            data['first_name'] = message.text
        await bot.send_message(message.from_user.id,
                               text='–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n\n'
                                    '–ê —Ç–µ–ø–µ—Ä—å —Ñ–∞–º–∏–ª–∏—é:',
                               reply_markup=registration_keyboard)
        await state.set_state(Registration.last_name)
    else:
        await message.reply(
           text='–ò–º—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã,'
                ' –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤'
                ' –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤'
        )


async def get_last_name(message: types.Message, state: FSMContext) -> None:
    """
    Get last name of user and asks for email.
    :param message:
    :param state:
    :return:
    """
    if re.match(r"^[A-Z|–ê-–Ø–Å][a-z|–∞-—è—ë]{1,25}$", message.text):
        async with state.proxy() as data:
            data['last_name'] = message.text
        await bot.send_message(message.from_user.id,
                               text='–•–æ—Ä–æ—à–æ, –∞ —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:',
                               reply_markup=gender_keyboard)
        await bot.send_message(message.from_user.id,
                               text='–î–∞, –≤–æ—Ç —Ç–∞–∫–æ–π –±–∞–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å',
                               reply_markup=registration_keyboard)
        await state.set_state(Registration.gender)
    else:
        await message.reply(
            text='–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã,'
                 ' –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤'
                 '–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 25 —Å–∏–º–≤–æ–ª–æ–≤'
        )


async def choose_gender(query: types.CallbackQuery, state: FSMContext) -> None:
    """
    Gets users gender and asks for email.
    :param query:
    :param state:
    :return:
    """
    if query.data in ['male', 'female']:
        user_gender = '–ú—É–∂—Å–∫–æ–π' if query.data == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'
        await state.set_state(Registration.email)
        async with state.proxy() as data:
            data['gender'] = user_gender
        await bot.send_message(
            query.from_user.id,
            text='–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—åü•π –ù–∞–ø–∏—à–∏ —Å–≤–æ–π e-mail,'
                 ' –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:'
        )
        await query.answer()


async def get_email(message: types.Message, state: FSMContext):
    if re.match(r'^[\w.\-]{1,64}@\w+\.(by|ru|ua|com)$', message.text):
        async with state.proxy() as data:
            data['email'] = message.text
        user_level = await db.get_user_level(message.from_user.id)
        if user_level != 'C—Ç–∞—Ä—Ç':
            await bot.send_message(
                message.from_user.id,
                text='–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ü•∑',
                reply_markup=choose_kb
            )
            await bot.send_message(
                message.from_user.id,
                text='–ò –Ω–∞ —ç—Ç–æ–º –≤—Å—ë üëç',
                reply_markup=registration_keyboard)
            await state.set_state(Registration.training_level)
        else:
            async with state.proxy() as data:
                data['chosen_date'] = datetime.now().date()
            await db.user_start_final_registration(state, message.from_user.id)
            await bot.send_message(
                message.from_user.id,
                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ üôå\n\n –°–æ–≤–µ—Ç—É—é –∑–∞–π—Ç–∏ –≤'
                     ' –ø—Ä–æ—Ñ–∏–ª—å üëπ, —Ä–∞–∑–¥–µ–ª "–ë–∏–æ–º–µ—Ç—Ä–∏–∫–∞".\n\n –ó–∞–ø–æ–ª–Ω–∏ –µ–≥–æ ‚Äî —ç—Ç–∏'
                     ' –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –≤–µ—Å–∞ –Ω–∞'
                     ' —Å–Ω–∞—Ä—è–¥–∞—Ö –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ—Å—Ç–∞—Ö „äóÔ∏è',
                reply_markup=user_keyboard
            )
            await state.finish()
    else:
        await message.reply(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email')


async def choose_workout_level(query: types.CallbackQuery,
                               state: FSMContext):
    """
    User is choosing his level during registration.
    :param query:
    :param state:
    :return:
    """
    level_to_answer = {
        'first_level': '–ü–µ—Ä–≤—ã–π',
        'second_level': '–í—Ç–æ—Ä–æ–π',
        'competition_level': '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è',
        'minkaif_level': '–ú–∏–Ω–∫–∞–π—Ñ–∞',
        'start_level': '–°—Ç–∞—Ä—Ç'
    }

    user_answer = level_to_answer.get(query.data)
    logging.info(f'Callback data: {query.data}')
    if user_answer is None:
        await query.message.answer(text='–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å',
                                   reply_markup=registration_keyboard)
    else:
        await query.answer(
            show_alert=True,
            text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å "{user_answer}"',
        )
        async with state.proxy() as data:
            data['level'] = user_answer
            data['chosen_date'] = datetime.now().date()
        await db.user_final_registration(
            state=state,
            telegram_id=query.from_user.id
        )
        await state.finish()
        await bot.send_message(
            query.from_user.id,
            '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ üôå\n\n –°–æ–≤–µ—Ç—É—é –∑–∞–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å üëπ,'
            ' —Ä–∞–∑–¥–µ–ª "–ë–∏–æ–º–µ—Ç—Ä–∏–∫–∞".\n\n –ó–∞–ø–æ–ª–Ω–∏ –µ–≥–æ ‚Äî —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è –¥–ª—è'
            ' –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –≤–µ—Å–∞ –Ω–∞ —Å–Ω–∞—Ä—è–¥–∞—Ö –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö –≤'
            ' –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ—Å—Ç–∞—Ö „äóÔ∏è',
            reply_markup=user_keyboard
        )


async def cancel_action(message: types.Message,
                        state: FSMContext):
    """
    Cancels FSMContext status
    :param message:
    :param state:
    :return:
    """
    current_state = await state.get_state()
    if current_state is None:
        return
    logging.info('Cancelling state %r', current_state)
    await state.finish()
    await message.answer('–û—Ç–º–µ–Ω–∏–ª')


def register_registration_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(
        start_registration,
        lambda query: True,
        state=Registration.new_user
    )
    dp.register_callback_query_handler(
        choose_workout_level,
        lambda query: True,
        state=Registration.training_level
    )
    dp.register_callback_query_handler(
        choose_gender,
        lambda query: True,
        state=Registration.gender
    )
    dp.register_message_handler(
        cancel_action,
        text='‚ùå –û—Ç–º–µ–Ω–∞',
        state='*'
    )
    dp.register_message_handler(
        get_first_name,
        state=Registration.first_name
    )
    dp.register_message_handler(
        get_last_name,
        state=Registration.last_name
    )

    dp.register_message_handler(
        get_email,
        state=Registration.email
    )
