from aiogram import types, Dispatcher
from datetime import datetime, timedelta
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from create_bot import db
from keyboards.profile_kb import (categories_keyboard,
                                  biometrics_inline_btns,
                                  create_inline_keyboard)


class BiometricsData(StatesGroup):
    height = State()
    weight = State()
    birthdate = State()

async def height_updated(message: types.Message,
                         state: FSMContext) -> None:
    """
    Get text from user message with height state active, if text is correct
    finish fsm and add weight to database for current user.
    :param message:
    :param state:
    :return:
    """
    try:
        if 150 < int(message.text) <= 220:
            async with state.proxy() as data:
                data['height'] = int(message.text)
            await db.update_user_height(message.from_user.id, state)
            biometrics_inline_kb = create_inline_keyboard(
                await biometrics_inline_btns(message.from_user.id))
            await message.answer(f"–í–∞—à —Ä–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω - {data['height']} c–º.",
                                 reply_markup=biometrics_inline_kb)
            await state.finish()
        elif 0 < int(message.text) < 150:
            await message.answer('–¢—ã —Ö–æ–±–±–∏—Ç?')
        elif int(message.text) >= 220:
            await message.answer('–ó–∞—á–µ–º —Ç–µ–±–µ –∫—Ä–æ—Å—Å—Ñ–∏—Ç? –ï—Å—Ç—å –±–∞c–∫–µ—Ç–±–æ–ª!')
        else:
            await message.answer('–ú–∏—Ä –∑–∞–∑–µ—Ä–∫–∞–ª—å—è üí©?')
    except ValueError or TypeError:
        await message.answer('–≠–º–º, —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ! ü§π')


async def weight_updated(message: types.Message,
                         state: FSMContext) -> None:
    """
    Get text from user message with weight state active, if text is correct
    finish fsm and add weight to database for current user.
    :param message:
    :param state:
    :return:
    """
    try:
        if 0 < int(message.text) < 38:
            await message.answer('–¢—ã —Ç–æ—á–Ω–æ –∫—É—à–∞–µ—à—å? üç©')
        elif int(message.text) > 140:
            await message.answer('–•–∞—Ñ—Ç–æ—Ä –ë—å–π–æ—Ä–Ω—Å–æ–Ω, —Ç—ã –ª–∏ —ç—Ç–æ!? ü•®')
        elif 38 <= int(message.text) <= 140:
            async with state.proxy() as data:
                data['weight'] = int(message.text)
            await db.update_user_weight(message.from_user.id, state)
            biometrics_inline_kb = create_inline_keyboard(
                await biometrics_inline_btns(message.from_user.id))
            await message.answer(f"–í–∞—à –≤–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω - {data['weight']} –∫–≥.",
                                 reply_markup=biometrics_inline_kb)
            await state.finish()
        else:
            await message.answer('–ù–µ –Ω–∞–¥–æ —Ç–∞–∫ ü§π')
    except ValueError or TypeError:
        await message.answer('–≠–º–º, —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ! ü§π')


async def birthdate_update(message: types.Message, state: FSMContext) -> None:
    """
    Adds user birthdate to database.
    :param message:
    :param state:
    :return:
    """
    eighteen_years = timedelta(days=365) * 18
    sixty_years = timedelta(days=365) * 60
    very_young = datetime.now().date() - eighteen_years
    very_old = datetime.now().date() - sixty_years
    try:

        users_birthdate = datetime.strptime(message.text, '%d-%m-%Y').date()
        if very_old < users_birthdate < very_young:
            async with state.proxy() as data:
                data['birthdate'] = users_birthdate
            await db.update_user_birthdate(message.from_user.id, state)
            biometrics_inline_kb = create_inline_keyboard(
                await biometrics_inline_btns(message.from_user.id))
            await message.answer(f'–û–±–Ω–æ–≤–ª–µ–Ω–æ! –¢–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è -'
                                 f' {data["birthdate"]}',
                                 reply_markup=biometrics_inline_kb)
            await state.finish()
        else:
            await message.answer('–°–ª–∏—à–∫–æ–º young üë∂ –∏–ª–∏ c–ª–∏—à–∫–æ–º old üßô‚Äç‚ôÇÔ∏è')
    except ValueError:
        await message.answer('–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É: –¥–¥-–º–º-–≥–≥–≥–≥')


def register_biometrics_handlers(dp: Dispatcher):
    dp.register_message_handler(height_updated,
                                state=BiometricsData.height)
    dp.register_message_handler(weight_updated,
                                state=BiometricsData.weight)
    dp.register_message_handler(birthdate_update,
                                state=BiometricsData.birthdate)

