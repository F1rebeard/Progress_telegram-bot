import logging
import re
from datetime import datetime

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import ChatNotFound, BotBlocked


from create_bot import bot, db
from config.constants import ADMIN_IDS
from handlers.users import MainMenu
from keyboards.user_kb import (answer_week,
                               answer_question,
                               navigation_keyboard,
                               question_1,
                               question_2,
                               question_3)


class Questions(StatesGroup):
    workouts_volume = State()
    self_results = State()
    scaling = State()
    reduce = State()
    fatigue = State()
    recovery = State()
    general = State()


async def start_poll_for_time_in_progress():
    """
    Send a user message to start polling about his time in project.
    """
    active_users = await db.get_telegram_ids_of_active_users()
    answered_users = await db.get_telegram_ids_who_answered()
    users_to_ask = set(active_users) - set(answered_users)
    logging.info(f'Users to ask: {users_to_ask}')
    for user in users_to_ask:
        try:
            await bot.send_message(
                chat_id=user,
                text='–ü—Ä–∏–≤–µ—Ç! \n\n–ú—ã —Å–æ–±–∏—Ä–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'
                     ' –ø–æ –Ω–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å ü•π',
                reply_markup=answer_question
            )
        except ChatNotFound or BotBlocked:
            logging.info(f'–ù–µ—Ç—É —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user}')


async def start_questions_about_workout_week():
    """
    Starts the question sequence about the passing week workouts.
    """
    active_users = await db.get_telegram_ids_of_active_users()
    answered_users = await db.get_users_who_answered_about_this_week()
    logging.info(f'{answered_users}')
    users_to_ask = set(active_users) - set(answered_users) - set(ADMIN_IDS)
    logging.info(f'Users to ask: {users_to_ask}')
    for user in users_to_ask:
        try:
            await bot.send_message(
                text='–ü—Ä–∏–≤–µ—Ç!\n\n'
                     '–û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö '
                     '—ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ ü§ñ',
                chat_id=user,
                reply_markup=answer_week
            )
        except ChatNotFound or BotBlocked:
            logging.info(f'–ß–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user} –Ω–µ—Ç!')


async def ask_about_week_self_results(query: types.CallbackQuery,
                                      state: FSMContext):
    if query.data == 'do_the_answers':
        await query.message.edit_text(
            '–û—Ü–µ–Ω–∏—Ç–µ —Ç–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ'
            ' –≤—ã –¥–æ–≤–æ–ª—å–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:',
            reply_markup=question_1
        )
        await query.answer()
        await state.set_state(Questions.self_results)


async def get_results_and_ask_for_scaling(query: types.CallbackQuery,
                                          state: FSMContext):
    """

    """
    if query.data.startswith('select_'):
        user_answer = int(query.data.split('_')[1])
        async with state.proxy() as data:
            data['results'] = user_answer
            await query.message.edit_text(
                '–û–∫–µ–π\n\n'
                '–ü—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –ª–∏ –≤–∞–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–±–∏—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è'
                ' –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã?',
                reply_markup=question_2
            )
            await state.set_state(Questions.scaling)
            await query.answer()


async def get_scaling_and_ask_for_fatigue(query: types.CallbackQuery,
                                          state: FSMContext):
    """

    """
    if query.data.startswith('select_'):
        user_answer = int(query.data.split('_')[1])
        async with state.proxy() as data:
            data['scaling'] = user_answer
            await query.message.edit_text(
                '–û–∫–µ–π\n\n'
                '–û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —É—Ç–æ–º–ª–µ–Ω–∏—è –∏ –º—ã—à–µ—á–Ω–æ–π –±–æ–ª–∏:',
                reply_markup=question_3
            )
            await state.set_state(Questions.fatigue)
            await query.answer()


async def get_fatigue_and_add_data(query: types.CallbackQuery,
                                   state: FSMContext):
    if query.data.startswith('select_'):
        user_answer = int(query.data.split('_')[1])
        async with state.proxy() as data:
            data['fatigue'] = user_answer
        await db.add_data_to_weekly_table(query.from_user.id, state)
        await state.finish()
        await query.message.edit_text('–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\n'
                                      '–°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!\n\n'
                                      '–ì—Ä–∞—Ñ–∏–∫–∏ —Å–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—à—å '
                                      '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ!')
        await query.answer()


async def ask_time_question(query: types.CallbackQuery,
                            state: FSMContext) -> None:
    """
    Ask about time in project and waiting for answer.
    """
    if query.data == 'answer_question':
        await query.message.answer(
            '–°–∫–∞–∂–∏ –∫–∞–∫ –¥–æ–ª–≥–æ —Ç—ã —Å –Ω–∞–º–∏? ü´∂üèªü•π‚ù§Ô∏è‚Äçü©π\n\n'
            '–ù–∞–ø–∏—à–∏ –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ'
            '–î–î.–ú–ú.–ì–ì–ì–ì\n\n –ï—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—à—å —Ç–æ –Ω–∞–ø–∏—à–∏ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –Ω–∞—á–∞–ª–∞'
            '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì',
            reply_markup=navigation_keyboard
        )
        await state.set_state(MainMenu.ask_time_question)
        await query.answer()


async def get_answer_for_time_question(message: types.Message,
                                       state: FSMContext):
    """
    Receives answer from users and adds answer to database.
    :param message: answer from user
    :param state: if answered successfully state is finished.
    """
    telegram_id = message.from_user.id
    if re.match(
            r'^(?:(?:0?[1-9]|[12][0-9]|3[01])\.'
            r'(?:0?[1-9]|1[0-2])|(?:0?[1-9]|1[0-2]))\.(?:\d{4})$',
            message.text):
        try:
            date = datetime.strptime(message.text, "%d.%m.%Y")
            formatted_date = date.strftime('%Y-%m-%d')
        except ValueError:
            month, year = message.text.split('.')
            formatted_date = datetime.strptime(
                f'01.{month}.{year}', '%d.%m.%Y'
            ).strftime('%Y-%m-%d')
        await db.add_new_data_about_time_in_project(
            telegram_id, formatted_date
        )
        await message.answer(f'–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n\n'
                             f'C–ø–∞—Å–∏–±–æ, –æ—Ç–ª–∏—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!')
        await state.finish()
    else:
        await message.answer(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n'
            '–ù–∞–ø–∏—à–∏ –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '
            '–î–î.–ú–ú.–ì–ì–ì–ì\n\n –ï—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—à—å –¥–µ–Ω—å, —Ç–æ –Ω–∞–ø–∏—à–∏ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –Ω–∞—á–∞–ª–∞'
            '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì'
        )


def register_question_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(
        get_results_and_ask_for_scaling,
        lambda query: True,
        state=Questions.self_results
    )
    dp.register_callback_query_handler(
        get_scaling_and_ask_for_fatigue,
        lambda query: True,
        state=Questions.scaling
    )
    dp.register_callback_query_handler(
        get_fatigue_and_add_data,
        lambda query: True,
        state=Questions.fatigue
    )
    dp.register_callback_query_handler(
        ask_time_question,
        lambda query: query.data == 'answer_question',
        state='*')
    dp.register_callback_query_handler(
        ask_about_week_self_results,
        state='*')
    dp.register_message_handler(get_answer_for_time_question,
                                state=MainMenu.ask_time_question)
